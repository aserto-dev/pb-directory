syntax = "proto3";

package aserto.directory.reader.v3;

option go_package = "github.com/aserto-dev/go-directory/aserto/directory/reader/v3;reader";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/struct.proto";

import "aserto/directory/common/v3/common.proto";

service Reader {
    // get object
    rpc GetObject(GetObjectRequest) returns (GetObjectResponse) {
        option (google.api.http) = {
            get: "/api/v3/directory/object/{object_type}/{object_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get object instance"
            description: "Returns single object instance, optionally with relations."
            operation_id: "directory.reader.v3.object.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
            responses: {
                key: "304"
                value: {
                    description: "Object not modified."
                }
            }
        };
    };

    // get multiple objects
    rpc GetObjectMany(GetObjectManyRequest) returns (GetObjectManyResponse) {};

    // list objects
    rpc GetObjects(GetObjectsRequest) returns (GetObjectsResponse) {
        option (google.api.http) = {
            get: "/api/v3/directory/objects"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "List object instances"
            description: "Returns list of object instances."
            operation_id: "directory.reader.v3.objects.list"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };

    // get relation
    rpc GetRelation(GetRelationRequest) returns (GetRelationResponse) {
        option (google.api.http) = {
            get: "/api/v3/directory/relation"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get relation instance"
            description: "Returns single relation instance, optionally with objects."
            operation_id: "directory.reader.v3.relation.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
            responses: {
                key: "304"
                value: {
                    description: "Relation not modified."
                }
            }
        };
    };

    // list relations
    rpc GetRelations(GetRelationsRequest) returns (GetRelationsResponse) {
        option (google.api.http) = {
            get: "/api/v3/directory/relations"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "List relations instances"
            description: "Returns list of relation instances."
            operation_id: "directory.reader.v3.relations.list"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };

    // check if subject has relation or permission with object
    rpc Check(CheckRequest) returns (CheckResponse) {
        option (google.api.http) = {
            post: "/api/v3/directory/check"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Check"
            description: "Returns check outcome."
            operation_id: "directory.reader.v3.check"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };

    // EXPERIMENTAL: checks validates a set of check requests in a single roundtrip
    rpc Checks(ChecksRequest) returns (ChecksResponse) {
        option (google.api.http) = {
            post: "/api/v3/directory/checks"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Checks"
            description: "Returns multiple check outcomes."
            operation_id: "directory.reader.v3.checks"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };


    // check permission (deprecated, use the check method)
    // Deprecated: use directory.reader.v3.Check()
    rpc CheckPermission(CheckPermissionRequest) returns (CheckPermissionResponse) {
        option deprecated = true;
        option (google.api.http) = {
            post: "/api/v3/directory/check/permission"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Check permission"
            description: "Returns check permission outcome."
            operation_id: "directory.reader.v3.check.permission"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };

    // check relation (deprecated, use the check method)
    // Deprecated: use directory.reader.v3.Check()
    rpc CheckRelation(CheckRelationRequest) returns (CheckRelationResponse) {
        option deprecated = true;
        option (google.api.http) = {
            post: "/api/v3/directory/check/relation"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Check relation"
            description: "Returns check relation outcome."
            operation_id: "directory.reader.v3.check.relation"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };

    // get object relationship graph
    rpc GetGraph(GetGraphRequest) returns (GetGraphResponse) {
        option (google.api.http) = {
            get: "/api/v3/directory/graph/{object_type}/{relation}/{subject_type}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get graph"
            description: "Returns object graph from anchor to subject or object."
            operation_id: "directory.reader.v3.graph"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };
}

message GetObjectRequest {
    // object type name (lc-string)
    string object_type                                          = 1
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // object identifier (cs-string)
    string object_id                                            = 2
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // materialize the object relations objects
    bool with_relations                                         = 3
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // pagination request
    aserto.directory.common.v3.PaginationRequest page           = 9
    [
        (google.api.field_behavior) = OPTIONAL
    ];
}

message GetObjectResponse {
    // object instance
    aserto.directory.common.v3.Object result                    = 1;
    // object relations
    repeated aserto.directory.common.v3.Relation relations      = 4;
    // pagination response
    aserto.directory.common.v3.PaginationResponse page          = 9;
}

message GetObjectManyRequest {
    // object identifier list
    repeated aserto.directory.common.v3.ObjectIdentifier param  = 1
    [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetObjectManyResponse {
    // array of object instances
    repeated aserto.directory.common.v3.Object results          = 1;
}

message GetObjectsRequest {
    // object type name (lc-string)
    string object_type                                          = 1
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // pagination request
    aserto.directory.common.v3.PaginationRequest page           = 9
    [
        (google.api.field_behavior) = OPTIONAL
    ];
}

message GetObjectsResponse {
    // array of object instances
    repeated aserto.directory.common.v3.Object results          = 1;
    // pagination response
    aserto.directory.common.v3.PaginationResponse page          = 9;
}

message GetRelationRequest {
    // object type
    string object_type                                          = 1
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // object identifier
    string object_id                                            = 2
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // relation name
    string relation                                             = 3
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // subject type
    string subject_type                                         = 4
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // subject identifier
    string subject_id                                           = 5
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // optional subject relation name
    string subject_relation                                     = 6
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // materialize relation objects
    bool with_objects                                           = 7
    [
        (google.api.field_behavior) = OPTIONAL
    ];
}

message GetRelationResponse {
    // relation instance
    aserto.directory.common.v3.Relation result                  = 1;
    // map of materialized relation objects
    map<string, aserto.directory.common.v3.Object> objects      = 2;
}

message GetRelationsRequest {
    // object type
    string object_type                                          = 1
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // object identifier
    string object_id                                            = 2
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // relation name
    string relation                                             = 3
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // subject type
    string subject_type                                         = 4
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // subject identifier
    string subject_id                                           = 5
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // optional subject relation name
    string subject_relation                                     = 6
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // materialize relation objects
    bool with_objects                                           = 7
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // only return relations that do not have a subject relation.
    bool with_empty_subject_relation                            = 8
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // pagination request
    aserto.directory.common.v3.PaginationRequest page           = 9
    [
        (google.api.field_behavior) = OPTIONAL
    ];
}

message GetRelationsResponse {
    // array of relation instances
    repeated aserto.directory.common.v3.Relation results        = 1;
    // map of materialized relation objects
    map<string, aserto.directory.common.v3.Object> objects      = 2;
    // pagination response
    aserto.directory.common.v3.PaginationResponse page          = 9;
}

message CheckRequest {
    // object type
    string object_type                                          = 1
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // object identifier
    string object_id                                            = 2
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // relation name
    string relation                                           = 3
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // subject type
    string subject_type                                         = 4
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // subject identifier
    string subject_id                                           = 5
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // collect trace information
    bool trace                                                  = 7
    [
        (google.api.field_behavior) = OPTIONAL
    ];
}

message CheckResponse {
    // check result
    bool check                                                  = 1;
    // trace information
    repeated string trace                                       = 2;
    // context
    google.protobuf.Struct context                              = 3;
}

// EXPERIMENTAL
message ChecksRequest {
    CheckRequest default                                        = 1;
    repeated CheckRequest checks                                = 2;
}

// EXPERIMENTAL
message ChecksResponse {
    repeated CheckResponse checks                               = 1;
}

message CheckPermissionRequest {
    // object type
    string object_type                                          = 1
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // object identifier
    string object_id                                            = 2
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // permission name
    string permission                                           = 3
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // subject type
    string subject_type                                         = 4
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // subject identifier
    string subject_id                                           = 5
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // collect trace information
    bool trace                                                  = 7
    [
        (google.api.field_behavior) = OPTIONAL
    ];
}

message CheckPermissionResponse {
    // check result
    bool check                                                  = 1;
    // trace information
    repeated string trace                                       = 2;
}

message CheckRelationRequest {
    // object type
    string object_type                                          = 1
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // object identifier
    string object_id                                            = 2
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // relation name
    string relation                                             = 3
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // subject type
    string subject_type                                         = 4
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // subject identifier
    string subject_id                                           = 5
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // collect trace information
    bool trace                                                  = 7
    [
        (google.api.field_behavior) = OPTIONAL
    ];
}

message CheckRelationResponse {
    // check result
    bool check                                                  = 1;
    // trace information
    repeated string trace                                       = 2;
}

message GetGraphRequest {
    reserved 1, 2;
    reserved "anchor_type", "anchor_id";

    // object type
    string object_type                                          = 3
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // object identifier
    string object_id                                            = 4
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // relation name
    string relation                                             = 5
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // subject type
    string subject_type                                         = 6
    [
        (google.api.field_behavior) = REQUIRED
    ];
    // subject identifier
    string subject_id                                           = 7
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // subject relation
    string subject_relation                                     = 8
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // return graph paths for each result
    bool explain                                                = 9
    [
        (google.api.field_behavior) = OPTIONAL
    ];
    // collect trace information
    bool trace                                                  = 10
    [
        (google.api.field_behavior) = OPTIONAL
    ];
}

message GetGraphResponse {
    reserved 1;

    // matching object identifiers
    repeated aserto.directory.common.v3.ObjectIdentifier results = 2;
    // explanation of results
    google.protobuf.Struct explanation                           = 3;
    // trace information
    repeated string trace                                        = 4;
}
