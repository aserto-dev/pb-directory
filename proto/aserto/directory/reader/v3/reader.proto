syntax = "proto3";

package aserto.directory.reader.v3;

option go_package = "github.com/aserto-dev/go-directory/aserto/directory/reader/v3;reader"; 

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "aserto/directory/common/v3/common.proto";

service Reader {
    // object type metadata methods
    rpc GetObjectType(GetObjectTypeRequest) returns (GetObjectTypeResponse) {};
    rpc GetObjectTypes(GetObjectTypesRequest) returns (GetObjectTypesResponse) {};
    
    // relation type metadata methods
    rpc GetRelationType(GetRelationTypeRequest) returns (GetRelationTypeResponse) {};
    rpc GetRelationTypes(GetRelationTypesRequest) returns (GetRelationTypesResponse) {};
    
    // permission metadata methods
    rpc GetPermission(GetPermissionRequest) returns (GetPermissionResponse) {};
    rpc GetPermissions(GetPermissionsRequest) returns (GetPermissionsResponse) {};
    
    // object methods
    rpc GetObject(GetObjectRequest) returns (GetObjectResponse) {
        option (google.api.http) = {
            get: "/api/v3/directory/object/{object_type}/{object_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get object instance"
            description: "Returns single object instance, optionally with relations."
            operation_id: "directory.v3.object.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };

    rpc GetObjectMany(GetObjectManyRequest) returns (GetObjectManyResponse) {};
    rpc GetObjects(GetObjectsRequest) returns (GetObjectsResponse) {
        option (google.api.http) = {
            get: "/api/v3/directory/objects/{object_type}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "List object instances"
            description: "Returns list of object instances."
            operation_id: "directory.v3.objects.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };
    
    // relation methods
    rpc GetRelation(GetRelationRequest) returns (GetRelationResponse) {
        option (google.api.http) = {
            get: "/api/v3/directory/relation/{object_type}/{object_id}/{relation}/{subject_type}/{subject_id}/{subject_relation}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get relation instance"
            description: "Returns single relation instance, optionally with objects."
            operation_id: "directory.v3.relation.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };

    rpc GetRelations(GetRelationsRequest) returns (GetRelationsResponse) {
        option (google.api.http) = {
            get: "/api/v3/directory/relations/object/{object_type}/{object_id}/{relation}/{subject_type}/{subject_id}/{subject_relation}"
            additional_bindings: [
                {
                  get: "/api/v3/directory/relations/subject/{subject_type}/{subject_id}/{subject_relation}/{object_type}/{object_id}/{relation}"
                }
              ]        
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "List relations instances"
            description: "Returns list of relation instances."
            // operation_id: "directory.v3.relations.get.object"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };
    
    // check permission method
    rpc CheckPermission(CheckPermissionRequest) returns (CheckPermissionResponse) {
        option (google.api.http) = {
            post: "/api/v3/directory/check/permission"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Check permission"
            description: "Returns check permission outcome."
            operation_id: "directory.v3.check.permission"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };

    // check relation method
    rpc CheckRelation(CheckRelationRequest) returns (CheckRelationResponse) {
        option (google.api.http) = {
            post: "/api/v3/directory/check/relation"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Check relation"
            description: "Returns check relation outcome."
            operation_id: "directory.v3.check.relation"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };

    // graph methods
    rpc GetGraph(GetGraphRequest) returns (GetGraphResponse) {
        option (google.api.http) = {
            post: "/api/v3/directory/graph"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get graph"
            description: "Returns object graph from anchor to subject or object."
            operation_id: "directory.v3.graph"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };
}

message GetObjectTypeRequest {
    string name                                                 = 1;    // object type name (unique, lc-string)
}

message GetObjectTypeResponse {
    aserto.directory.common.v3.ObjectType result                = 1;    // object type instance
}

message GetObjectTypesRequest {
    aserto.directory.common.v3.PaginationRequest page           = 9;    // pagination request
}

message GetObjectTypesResponse {
    repeated aserto.directory.common.v3.ObjectType results      = 1;    // array of object types
    aserto.directory.common.v3.PaginationResponse page          = 9;    // pagination response
}

message GetRelationTypeRequest {
    string object_type                                          = 1;    // object type name (unique, lc-string)
    string name                                                 = 2;    // relation name (unique, lc-string)
}

message GetRelationTypeResponse {
    aserto.directory.common.v3.RelationType result              = 1;    // relation type instance
}

message GetRelationTypesRequest {
    string object_type                                          = 1;    // object type name (unique, lc-string)
    aserto.directory.common.v3.PaginationRequest page           = 9;    // pagination request
}

message GetRelationTypesResponse {
    repeated aserto.directory.common.v3.RelationType results    = 1;    // array of relation types
    aserto.directory.common.v3.PaginationResponse page          = 9;    // pagination response
}

message GetPermissionRequest {
    optional string name                                        = 1;    // permission name (unique, cs-string)
}

message GetPermissionResponse {
    aserto.directory.common.v3.Permission result                = 1;    // permission instance
}

message GetPermissionsRequest {
    aserto.directory.common.v3.PaginationRequest page           = 9;    // pagination request
}

message GetPermissionsResponse {
    repeated aserto.directory.common.v3.Permission results      = 1;    // array of permissions
    aserto.directory.common.v3.PaginationResponse page          = 9;    // pagination response
}

message GetObjectRequest {
    string object_type                                          = 1;    // object type name (lc-string)
    string object_id                                            = 2;    // object identifier (cs-string)
    optional bool with_relations                                = 3;    // materialize the object relations objects
}

message GetObjectResponse {
    aserto.directory.common.v3.Object result                    = 1;    // object instance
    repeated aserto.directory.common.v3.Relation incoming       = 2;    // incoming object relations
    repeated aserto.directory.common.v3.Relation outgoing       = 3;    // outgoing object relations
}

message GetObjectManyRequest {
    repeated aserto.directory.common.v3.ObjectIdentifier param  = 1;    // object identifier list
}

message GetObjectManyResponse {
    repeated aserto.directory.common.v3.Object results          = 1;    // array of object instances
}

message GetObjectsRequest {
    string object_type                                          = 1;    // object type name (lc-string)
    aserto.directory.common.v3.PaginationRequest page           = 9;    // pagination request
}

message GetObjectsResponse {
    repeated aserto.directory.common.v3.Object results          = 1;    // array of object instances
    aserto.directory.common.v3.PaginationResponse page          = 9;    // pagination response
}

message GetRelationRequest {
    string object_type                                          = 1;    // object type
    string object_id                                            = 2;    // object identifier
    string relation                                             = 3;    // relation name
    string subject_type                                         = 4;    // subject type
    string subject_id                                           = 5;    // subject identifier
    string subject_relation                                     = 6;    // optional subject relation name
    optional bool with_objects                                  = 7;    // materialize relation objects
}

message GetRelationResponse {
    repeated aserto.directory.common.v3.Relation results        = 1;    // array of relation instances
    map<string, aserto.directory.common.v3.Object> objects      = 2;    // map of materialized relation objects
}

message GetRelationsRequest {
    string object_type                                          = 1;    // object type
    string object_id                                            = 2;    // object identifier
    string relation                                             = 3;    // relation name
    string subject_type                                         = 4;    // subject type
    string subject_id                                           = 5;    // subject identifier
    string subject_relation                                     = 6;    // optional subject relation name
    aserto.directory.common.v3.PaginationRequest page           = 9;    // pagination request
}

message GetRelationsResponse {
    repeated aserto.directory.common.v3.Relation results        = 1;    // array of relation instances
    aserto.directory.common.v3.PaginationResponse page          = 9;    // pagination response
}

message CheckPermissionRequest {
    string object_type                                          = 1;    // object type
    string object_id                                            = 2;    // object identifier
    string permission                                           = 3;    // permission name
    string subject_type                                         = 4;    // subject type
    string subject_id                                           = 5;    // subject identifier
    bool trace                                                  = 7;    // collect trace information
}   

message CheckPermissionResponse { 
    bool check                                                  = 1;    // check result (BOOL)
    repeated string trace                                       = 2;    // trace information
}

message CheckRelationRequest {
    string object_type                                          = 1;    // object type
    string object_id                                            = 2;    // object identifier
    string relation                                             = 3;    // relation name
    string subject_type                                         = 4;    // subject type
    string subject_id                                           = 5;    // subject identifier
    bool trace                                                  = 7;    // collect trace information
}   

message CheckRelationResponse { 
    bool check                                                  = 1;    // check result (BOOL)
    repeated string trace                                       = 2;    // trace information
}

message CheckResponse { 
    bool check                                                  = 1;    // check result (BOOL)
    repeated string trace                                       = 2;    // trace information
}

message GetGraphRequest {
    string anchor_type                                          = 1;    // anchor type
    string anchor_id                                            = 2;    // anchor identifier
    string object_type                                          = 3;    // object type
    string object_id                                            = 4;    // object identifier
    string relation                                             = 5;    // relation name
    string subject_type                                         = 6;    // subject type
    string subject_id                                           = 7;    // subject identifier
}

message GetGraphResponse {
    repeated aserto.directory.common.v3.ObjectDependency results= 1;    // dependency graph
}
