syntax = "proto3";

package aserto.directory.reader.v2;

option go_package = "github.com/aserto-dev/go-directory/aserto/directory/reader/v2;reader"; 

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "aserto/directory/common/v2/common.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
        security: {
            key: "TenantID"
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "aserto-tenant-id";
            }
        }
        security: {
            key: "DirectoryAPIKey"
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "authorization";
            }
        }
    }
    security: {
		security_requirement: {
			key: "DirectoryAPIKey";
			value: {};
		}
		security_requirement: {
			key: "TenantID";
			value: {};
		}
	}
};

service Reader {
    // object type metadata methods
    rpc GetObjectType(GetObjectTypeRequest) returns (GetObjectTypeResponse) {
        option (google.api.http) = {
            post: "/api/v2/directory/object_type"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get object type"
            description: "Returns object type by name."
            operation_id: "directory.object_type.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };        
    };

    rpc GetObjectTypes(GetObjectTypesRequest) returns (GetObjectTypesResponse) {
        option (google.api.http) = {
            post: "/api/v2/directory/object_types"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get object types"
            description: "Returns object types."
            operation_id: "directory.object_types.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };        
    };
    
    // relation type metadata methods
    rpc GetRelationType(GetRelationTypeRequest) returns (GetRelationTypeResponse) {
        option (google.api.http) = {
            post: "/api/v2/directory/relation_type"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get relation type"
            description: "Returns relation type by name."
            operation_id: "directory.object_type.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };        
    };

    rpc GetRelationTypes(GetRelationTypesRequest) returns (GetRelationTypesResponse) {
        option (google.api.http) = {
            post: "/api/v2/directory/relation_types"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get relation types"
            description: "Returns relation types, optionally by object_type."
            operation_id: "directory.relation_types.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };        
    };
    
    // permission metadata methods
    rpc GetPermission(GetPermissionRequest) returns (GetPermissionResponse) {
        option (google.api.http) = {
            post: "/api/v2/directory/permission"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get permission"
            description: "Returns permission by name."
            operation_id: "directory.permission.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };    
    };

    rpc GetPermissions(GetPermissionsRequest) returns (GetPermissionsResponse) {
        option (google.api.http) = {
            post: "/api/v2/directory/permissions"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get permissions"
            description: "Returns permissions."
            operation_id: "directory.permissions.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };    
    };
    
    // object methods
    rpc GetObject(GetObjectRequest) returns (GetObjectResponse) {
        option (google.api.http) = {
            post: "/api/v2/directory/object"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get object instance"
            description: "Returns object instance, optionally with relations."
            operation_id: "directory.object.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };

    rpc GetObjectMany(GetObjectManyRequest) returns (GetObjectManyResponse) {};
    rpc GetObjects(GetObjectsRequest) returns (GetObjectsResponse) {
        option (google.api.http) = {
            post: "/api/v2/directory/objects"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get object instances"
            description: "Returns object instances."
            operation_id: "directory.objects.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };
    
    // relation methods
    rpc GetRelation(GetRelationRequest) returns (GetRelationResponse) {
        option (google.api.http) = {
            post: "/api/v2/directory/relation"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get relation instance"
            description: "Returns relation instance, optionally with objects."
            operation_id: "directory.relation.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };

    rpc GetRelations(GetRelationsRequest) returns (GetRelationsResponse) {
        option (google.api.http) = {
            post: "/api/v2/directory/relations"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get relation instances"
            description: "Returns relation instances."
            operation_id: "directory.relations.get"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };
    
    // check permission method
    rpc CheckPermission(CheckPermissionRequest) returns (CheckPermissionResponse) {
        option (google.api.http) = {
            post: "/api/v2/directory/check/permission"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Check permission"
            description: "Returns check permission outcome."
            operation_id: "directory.check.permission"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };

    // check relation method
    rpc CheckRelation(CheckRelationRequest) returns (CheckRelationResponse) {
        option (google.api.http) = {
            post: "/api/v2/directory/check/relation"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Check relation"
            description: "Returns check relation outcome."
            operation_id: "directory.check.relation"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };

    // graph methods
    rpc GetGraph(GetGraphRequest) returns (GetGraphResponse) {
        option (google.api.http) = {
            post: "/api/v2/directory/graph"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Get graph"
            description: "Returns object graph from anchor to subject or object."
            operation_id: "directory.graph"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };
    };
}

message GetObjectTypeRequest {
    aserto.directory.common.v2.ObjectTypeIdentifier param       = 1;    // object type selector
}

message GetObjectTypeResponse {
    aserto.directory.common.v2.ObjectType result                = 1;    // object type instance
}

message GetObjectTypesRequest {
    aserto.directory.common.v2.PaginationRequest page           = 9;    // pagination request
}

message GetObjectTypesResponse {
    repeated aserto.directory.common.v2.ObjectType results      = 1;    // array of object types
    aserto.directory.common.v2.PaginationResponse page          = 9;    // pagination response
}

message GetRelationTypeRequest {
    aserto.directory.common.v2.RelationTypeIdentifier param     = 1;    // relation type selector
}

message GetRelationTypeResponse {
    aserto.directory.common.v2.RelationType result              = 1;    // relation type instance
}

message GetRelationTypesRequest {
    aserto.directory.common.v2.ObjectTypeIdentifier param       = 1;    // object type selector    
    aserto.directory.common.v2.PaginationRequest page           = 9;    // pagination request
}

message GetRelationTypesResponse {
    repeated aserto.directory.common.v2.RelationType results    = 1;    // array of relation types
    aserto.directory.common.v2.PaginationResponse page          = 9;    // pagination response
}

message GetObjectRequest {
    aserto.directory.common.v2.ObjectIdentifier param           = 1;    // object selector
    optional bool with_relations                                = 2;    // materialize the object relations objects
}

message GetObjectResponse {
    aserto.directory.common.v2.Object result                    = 1;    // object instance
    repeated aserto.directory.common.v2.Relation incoming       = 2;    // incoming object relations
    repeated aserto.directory.common.v2.Relation outgoing       = 3;    // outgoing object relations
}

message GetObjectManyRequest {
    repeated aserto.directory.common.v2.ObjectIdentifier param  = 1;    // object identifier list
}

message GetObjectManyResponse {
    repeated aserto.directory.common.v2.Object results          = 1;    // array of object instances
}

message GetObjectsRequest {
    aserto.directory.common.v2.ObjectTypeIdentifier param       = 1;    // object type selector
    aserto.directory.common.v2.PaginationRequest page           = 9;    // pagination request
}

message GetObjectsResponse {
    repeated aserto.directory.common.v2.Object results          = 1;    // array of object instances
    aserto.directory.common.v2.PaginationResponse page          = 9;    // pagination response
}

message GetRelationRequest {
    aserto.directory.common.v2.RelationIdentifier param         = 1;    // relation selector
    optional bool with_objects                                  = 2;    // materialize relation objects
}

message GetRelationResponse {
    repeated aserto.directory.common.v2.Relation results        = 1;    // array of relation instances
    map<string, aserto.directory.common.v2.Object> objects      = 2;    // map of materialized relation objects
}

message GetRelationsRequest {
    aserto.directory.common.v2.RelationIdentifier param         = 1;    // relation selector
    aserto.directory.common.v2.PaginationRequest page           = 9;    // pagination request
}

message GetRelationsResponse {
    repeated aserto.directory.common.v2.Relation results        = 1;    // array of relation instances
    aserto.directory.common.v2.PaginationResponse page          = 9;    // pagination response
}

message GetPermissionRequest {
    aserto.directory.common.v2.PermissionIdentifier param       = 1;    // permission selector
}

message GetPermissionResponse {
    aserto.directory.common.v2.Permission result                = 1;    // permission instance
}

message GetPermissionsRequest {
    aserto.directory.common.v2.PaginationRequest page           = 9;    // pagination request
}

message GetPermissionsResponse {
    repeated aserto.directory.common.v2.Permission results      = 1;    // array of permissions
    aserto.directory.common.v2.PaginationResponse page          = 9;    // pagination response
}

message CheckPermissionRequest {
    aserto.directory.common.v2.ObjectIdentifier subject         = 1;    // subject selector
    aserto.directory.common.v2.PermissionIdentifier permission  = 2;    // permission selector
    aserto.directory.common.v2.ObjectIdentifier object          = 3;    // object selector
    bool trace                                                  = 7;    // collect trace information
}   

message CheckPermissionResponse { 
    bool check                                                  = 1;    // check result (BOOL)
    repeated string trace                                       = 2;    // trace information
}

message CheckRelationRequest {
    aserto.directory.common.v2.ObjectIdentifier subject         = 1;    // subject selector
    aserto.directory.common.v2.RelationTypeIdentifier relation  = 2;    // relation selector
    aserto.directory.common.v2.ObjectIdentifier object          = 3;    // object selector
    bool trace                                                  = 7;    // collect trace information
}   

message CheckRelationResponse { 
    bool check                                                  = 1;    // check result (BOOL)
    repeated string trace                                       = 2;    // trace information
}

message CheckResponse { 
    bool check                                                  = 1;    // check result (BOOL)
    repeated string trace                                       = 2;    // trace information
}

message GetGraphRequest {
    aserto.directory.common.v2.ObjectIdentifier anchor          = 1;    // anchor selector
    aserto.directory.common.v2.ObjectIdentifier subject         = 2;    // subject selector
    aserto.directory.common.v2.RelationTypeIdentifier relation  = 3;    // relation selector
    aserto.directory.common.v2.ObjectIdentifier object          = 4;    // object selector
}

message GetGraphResponse {
    repeated aserto.directory.common.v2.ObjectDependency results= 1;    // dependency graph
}
