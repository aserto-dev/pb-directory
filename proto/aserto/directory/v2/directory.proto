syntax = "proto3";

package aserto.directory.v2;

option go_package = "github.com/aserto-dev/go-directory/aserto/directory/v2;directory"; 

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "aserto/api/v2/pagination.proto";

import "aserto/directory/v2/object.proto";
import "aserto/directory/v2/permission.proto";
import "aserto/directory/v2/relation.proto";

// OpenAPI annotations.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {}
    security: {}
};

service Directory {
    // object type metadata methods
    rpc GetObjectType(GetObjectTypeRequest) returns (GetObjectTypeResponse) {};
    rpc ListObjectTypes(ListObjectTypesRequest) returns (ListObjectTypesResponse) {};
    
    // relation type metadata methods
    rpc GetRelationType(GetRelationTypeRequest) returns (GetRelationTypeResponse) {};
    rpc ListRelationTypes(ListRelationTypesRequest) returns (ListRelationTypesResponse) {};
    
    // permission metadata methods
    rpc GetPermission(GetPermissionRequest) returns (GetPermissionResponse) {};
    rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse) {};
    
    // object methods
    rpc GetObject(GetObjectRequest) returns (GetObjectResponse) {};
    rpc GetObjectMany(GetObjectManyRequest) returns (GetObjectManyResponse) {};
    rpc ListObjects(ListObjectsRequest) returns (ListObjectsResponse) {};
    
    // relation methods
    rpc GetRelation(GetRelationRequest) returns (GetRelationResponse) {};
    rpc ListRelations(ListRelationsRequest) returns (ListRelationsResponse) {};
    
    // graph methods
    rpc GetGraph(GetGraphRequest) returns (GetGraphResponse) {};
    
    // check methods
    rpc Check(CheckRequest) returns (CheckResponse) {};

    // misc methods
    rpc Info(InfoRequest) returns (InfoResponse) {
        option (google.api.http) = {
            get: "/api/v2/directory/info"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "info"
            summary: "Directory Info Endpoint"
            description: "Directory Info Endpoint"
            operation_id: "directory.info"
            deprecated: false
            security: {}
        };
    }
}

message InfoRequest {
}

message InfoResponse {
    google.protobuf.Struct info             = 1;    // version & service info
}

message GetObjectTypeRequest {
    ObjectTypeParam param                   = 1;    // object type selector
}

message GetObjectTypeResponse {
    repeated ObjectType results             = 1;    // array of object types
}

message ListObjectTypesRequest {
    aserto.api.v2.PaginationRequest page    = 9;    // pagination request
}

message ListObjectTypesResponse {
    repeated ObjectType results             = 1;    // array of object types
    aserto.api.v2.PaginationResponse page   = 9;    // pagination response
}

message GetRelationTypeRequest {
    RelationTypeParam param                 = 1;    // relation type selector
}

message GetRelationTypeResponse {
    repeated RelationType results           = 1;    // array of relation types
}

message ListRelationTypesRequest {
    optional string object_type             = 1;    // optional object type filter
    aserto.api.v2.PaginationRequest page    = 9;    // pagination request
}

message ListRelationTypesResponse {
    repeated RelationType results           = 1;    // array of relation types
    aserto.api.v2.PaginationResponse page   = 9;    // pagination response
}

message GetObjectRequest {
    ObjectParam param                       = 1;    // object selector
}

message GetObjectResponse {
    repeated Object results                 = 1;    // array of object instances
}

message GetObjectManyRequest {
    repeated ObjectParam param              = 1;    // object identifier list
}

message GetObjectManyResponse {
    repeated Object results                 = 1;    // array of object instances
}

message ListObjectsRequest {
    optional string type                    = 1;    // object type filter (OPTIONAL)
    aserto.api.v2.PaginationRequest page    = 9;    // pagination request
}

message ListObjectsResponse {
    repeated Object results                 = 1;    // array of object instances
    aserto.api.v2.PaginationResponse page   = 9;    // pagination response
}

message GetRelationRequest {
    RelationParam param                     = 1;    // relation selector
}

message GetRelationResponse {
    repeated Relation results               = 1;    // array of relation instances
}

message ListRelationsRequest {
    RelationParam param                     = 1;    // relation selector
    aserto.api.v2.PaginationRequest page    = 9;    // pagination request
}

message ListRelationsResponse {
    repeated Relation results               = 1;    // results array of relations
    aserto.api.v2.PaginationResponse page   = 2;    // pagination response
}

message GetPermissionRequest {
    PermissionParam param                   = 1;    // permission selector
}

message GetPermissionResponse {
    repeated Permission results             = 1;    // array of permision instances
}

message ListPermissionsRequest {
    aserto.api.v2.PaginationRequest page    = 9;    // pagination request
}

message ListPermissionsResponse {
    repeated Permission results             = 1;    // array of permissions
    aserto.api.v2.PaginationResponse page   = 9;    // pagination response
}

message CheckRequest {
    ObjectParam subject                     = 1;    // subject selector
    oneof check {
        RelationTypeParam relation          = 2;    // relation check
        PermissionParam permission          = 3;    // permission check
    }
    ObjectParam object                      = 4;    // object selector
    bool trace                              = 5;    // collect trace information
}   

message CheckResponse { 
    bool check                              = 1;    // check result (BOOL)
    repeated string trace                   = 2;    // trace for true values
}

message GetGraphRequest {
    string  anchor_id                       = 1;    // anchor ID, source or target (UUID)
    RelationParam param                     = 2;    // relation selector
}

message GetGraphResponse {
    repeated ObjectDependency results       = 1;    // relationship graph
}
