syntax = "proto3";

package aserto.directory.writer.v2;

option go_package = "github.com/aserto-dev/go-directory/aserto/directory/writer/v2;writer"; 

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "aserto/directory/common/v2/common.proto";

service Writer {
    // object type metadata methods
    rpc SetObjectType(SetObjectTypeRequest) returns (SetObjectTypeResponse) {
        option (google.api.http) = {
            put: "/api/v2/directory/object_type"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Set object type"
            description: "Set object type."
            operation_id: "directory.object_type.set"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };    
    };

    rpc DeleteObjectType(DeleteObjectTypeRequest) returns (DeleteObjectTypeResponse) {
        option (google.api.http) = {
            delete: "/api/v2/directory/object_type"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Delete object type"
            description: "Delete object type."
            operation_id: "directory.object_type.delete"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };    
    };
    
    // relation type metadata methods
    rpc SetRelationType(SetRelationTypeRequest) returns (SetRelationTypeResponse) {
        option (google.api.http) = {
            put: "/api/v2/directory/relation_type"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Set relation type"
            description: "Set relation type."
            operation_id: "directory.relation_type.set"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };    
    };

    rpc DeleteRelationType(DeleteRelationTypeRequest) returns (DeleteRelationTypeResponse) {
        option (google.api.http) = {
            delete: "/api/v2/directory/relation_type"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Delete relation type"
            description: "Delete relation type."
            operation_id: "directory.relation_type.delete"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };   
    };
    
    // permission metadata methods
    rpc SetPermission(SetPermissionRequest) returns (SetPermissionResponse) {
        option (google.api.http) = {
            put: "/api/v2/directory/permission"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Set permission"
            description: "Set permission."
            operation_id: "directory.permission.set"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };    
    };

    rpc DeletePermission(DeletePermissionRequest) returns (DeletePermissionResponse) {
        option (google.api.http) = {
            delete: "/api/v2/directory/permission"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Delete permission"
            description: "Delete permission."
            operation_id: "directory.permission.delete"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };   
    };
    
    // object methods
    rpc SetObject(SetObjectRequest) returns (SetObjectResponse) {
        option (google.api.http) = {
            put: "/api/v2/directory/object"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Set relation type"
            description: "Set relation type."
            operation_id: "directory.relation_type.set"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };    
    };

    rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse) {
        option (google.api.http) = {
            delete: "/api/v2/directory/object"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Delete permission"
            description: "Delete permission."
            operation_id: "directory.permission.delete"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };   
    };
    
    // relation methods
    rpc SetRelation(SetRelationRequest) returns (SetRelationResponse) {
        option (google.api.http) = {
            put: "/api/v2/directory/relation"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Set relation"
            description: "Set relation."
            operation_id: "directory.relation.set"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };    
    };

    rpc DeleteRelation(DeleteRelationRequest) returns (DeleteRelationResponse) {
        option (google.api.http) = {
            delete: "/api/v2/directory/relation"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Delete relation"
            description: "Delete relation."
            operation_id: "directory.relation.delete"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };   
    };
}

message SetObjectTypeRequest {
    aserto.directory.common.v2.ObjectType object_type           = 1;    // 
}

message SetObjectTypeResponse {
    aserto.directory.common.v2.ObjectType result                = 1;    // object type instance
}

message DeleteObjectTypeRequest {
    aserto.directory.common.v2.ObjectTypeIdentifier param       = 1;    // 
}

message DeleteObjectTypeResponse {
    google.protobuf.Empty result                                = 1;    // empty result
}

message SetRelationTypeRequest {
    aserto.directory.common.v2.RelationType relation_type       = 1;    // 
}

message SetRelationTypeResponse {
    aserto.directory.common.v2.RelationType result              = 1;    // relation types instance
}

message DeleteRelationTypeRequest {
    aserto.directory.common.v2.RelationTypeIdentifier param     = 1;    // 
}   
    
message DeleteRelationTypeResponse {    
    google.protobuf.Empty result                                = 1;    // empty result
}   
    
message SetPermissionRequest {
    aserto.directory.common.v2.Permission permission            = 1;    // 
}   
    
message SetPermissionResponse { 
    aserto.directory.common.v2.Permission result                = 1;    // permission instance
}   
    
message DeletePermissionRequest {
    aserto.directory.common.v2.PermissionIdentifier param       = 1;   // 
}   
    
message DeletePermissionResponse {  
    google.protobuf.Empty result                                = 1;    // empty result
}   
    
message SetObjectRequest {
    aserto.directory.common.v2.Object object                    = 1;    // 
}   
    
message SetObjectResponse { 
    aserto.directory.common.v2.Object result                    = 1;    // object instance
}   
    
message DeleteObjectRequest {
    aserto.directory.common.v2.ObjectIdentifier param           = 1;    // 
}   
    
message DeleteObjectResponse {  
    google.protobuf.Empty result                                = 1;    // empty result
}   
    
message SetRelationRequest {    
    aserto.directory.common.v2.Relation relation                = 1;    // 
}   
    
message SetRelationResponse {   
    aserto.directory.common.v2.Relation result                  = 1;    // relation instance
}   
    
message DeleteRelationRequest {
    aserto.directory.common.v2.RelationIdentifier param         = 1;    // 
}   
    
message DeleteRelationResponse {    
    google.protobuf.Empty result                                = 1;    // empty result
}   
