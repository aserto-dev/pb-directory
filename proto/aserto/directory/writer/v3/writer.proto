syntax = "proto3";

package aserto.directory.writer.v3;

option go_package = "github.com/aserto-dev/go-directory/aserto/directory/writer/v3;writer"; 

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "aserto/directory/common/v3/common.proto";

service Writer {
    // object type metadata methods
    // rpc SetObjectType(SetObjectTypeRequest) returns (SetObjectTypeResponse) {};
    // rpc DeleteObjectType(DeleteObjectTypeRequest) returns (DeleteObjectTypeResponse) {};
    
    // relation type metadata methods
    // rpc SetRelationType(SetRelationTypeRequest) returns (SetRelationTypeResponse) {};
    // rpc DeleteRelationType(DeleteRelationTypeRequest) returns (DeleteRelationTypeResponse) {};
    
    // permission metadata methods
    // rpc SetPermission(SetPermissionRequest) returns (SetPermissionResponse) {};
    // rpc DeletePermission(DeletePermissionRequest) returns (DeletePermissionResponse) {};
    
    // object methods
    rpc SetObject(SetObjectRequest) returns (SetObjectResponse) {
        option (google.api.http) = {
            put: "/api/v3/directory/object"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Set object"
            description: "Set object."
            operation_id: "directory.v3.object.set"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };    
    };

    rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse) {
        option (google.api.http) = {
            delete: "/api/v3/directory/object/{object_type}/{object_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Delete object"
            description: "Delete object."
            operation_id: "directory.v3.object.delete"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };   
    };
    
    // relation methods
    rpc SetRelation(SetRelationRequest) returns (SetRelationResponse) {
        option (google.api.http) = {
            put: "/api/v3/directory/relation"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Set relation"
            description: "Set relation."
            operation_id: "directory.v3.relation.set"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };    
    };

    rpc DeleteRelation(DeleteRelationRequest) returns (DeleteRelationResponse) {
        option (google.api.http) = {
            delete: "/api/v3/directory/relation/{object_type}/{object_id}/{relation}/{subject_type}/{subject_id}/{subject_relation}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "directory"
            summary: "Delete relation"
            description: "Delete relation."
            operation_id: "directory.v3.relation.delete"
            deprecated: false
            security: {
                security_requirement: {
                    key: "TenantID";
                    value: {}
                }
                security_requirement: {
                    key: "DirectoryAPIKey";
                    value: {}
                }
            }
        };   
    };
}

// message SetObjectTypeRequest {
//     aserto.directory.common.v3.ObjectType object_type           = 1;    // 
// }

// message SetObjectTypeResponse {
//     aserto.directory.common.v3.ObjectType result                = 1;    // object type instance
// }

// message DeleteObjectTypeRequest {
//     aserto.directory.common.v3.ObjectTypeIdentifier param       = 1;    // 
// }

// message DeleteObjectTypeResponse {
//     google.protobuf.Empty result                                = 1;    // empty result
// }

// message SetRelationTypeRequest {
//     aserto.directory.common.v3.RelationType relation_type       = 1;    // 
// }

// message SetRelationTypeResponse {
//     aserto.directory.common.v3.RelationType result              = 1;    // relation types instance
// }

// message DeleteRelationTypeRequest {
//     aserto.directory.common.v3.RelationTypeIdentifier param     = 1;    // 
// }   
    
// message DeleteRelationTypeResponse {    
//     google.protobuf.Empty result                                = 1;    // empty result
// }   
    
// message SetPermissionRequest {
//     aserto.directory.common.v3.Permission permission            = 1;    // 
// }   
    
// message SetPermissionResponse { 
//     aserto.directory.common.v3.Permission result                = 1;    // permission instance
// }   
    
// message DeletePermissionRequest {
//     aserto.directory.common.v3.PermissionIdentifier param       = 1;   // 
// }   
    
// message DeletePermissionResponse {  
//     google.protobuf.Empty result                                = 1;    // empty result
// }   
    
message SetObjectRequest {
    aserto.directory.common.v3.Object object                    = 1;    // 
}   
    
message SetObjectResponse { 
    aserto.directory.common.v3.Object result                    = 1;    // object instance
}   
    
message DeleteObjectRequest {
    string object_type                                          = 1;    // object type name (lc-string)
    string object_id                                            = 2;    // object identifier (cs-string)
    optional bool with_relations                                = 3;    // delete object relations, both object and subject relations.
}   
    
message DeleteObjectResponse {  
    google.protobuf.Empty result                                = 1;    // empty result
}   
    
message SetRelationRequest {    
    aserto.directory.common.v3.Relation relation                = 1;    // 
}   
    
message SetRelationResponse {   
    string object_type                                          = 1;    // object type
    string object_id                                            = 2;    // object identifier
    string relation                                             = 3;    // object relation name
    string subject_type                                         = 4;    // subject type
    string subject_id                                           = 5;    // subject identifier
    string subject_relation                                     = 6;    // optional subject relation name
}   
    
message DeleteRelationRequest {
    string object_type                                          = 1;    // object type
    string object_id                                            = 2;    // object identifier
    string relation                                             = 3;    // object relation name
    string subject_type                                         = 4;    // subject type
    string subject_id                                           = 5;    // subject identifier
    string subject_relation                                     = 6;    // optional subject relation name
}   
    
message DeleteRelationResponse {    
    google.protobuf.Empty result                                = 1;    // empty result
}   
